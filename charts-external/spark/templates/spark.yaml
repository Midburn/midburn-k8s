{{ if .Values.enabled }}{{ if .Values.enableDeployment }}
apiVersion: v1
kind: Service
metadata:
  name: spark
spec:
  ports:
  - name: '3000'
    port: 3000
  selector:
    app: spark
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: spark
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: spark
    spec:
      containers:
      - name: migrations
        image: {{ .Values.image | default "orihoch/spark:modernize-dockerize" | quote }}
        command:
        - bash
        - "-c"
        - |
          if knex migrate:latest; then
            touch /migrations/ran;
            while true; do sleep 86400; done
          else
            touch /migrations/failed
            exit 1
          fi
        resources: {{ .Values.migrationsResources }}
        envFrom: [{"configMapRef": {"name": "spark"}}]
        env:
        {{ if .Values.appSecretName }}
        - {"name": "SPARK_DB_DBNAME", "valueFrom": {"secretKeyRef": {"name": {{ .Values.appSecretName | quote }}, "key": "MYSQL_DATABASE"}}}
        - {"name": "SPARK_DB_USER", "valueFrom": {"secretKeyRef": {"name": {{ .Values.appSecretName | quote }}, "key": "MYSQL_USER"}}}
        - {"name": "SPARK_DB_PASSWORD", "valueFrom": {"secretKeyRef": {"name": {{ .Values.appSecretName | quote }}, "key": "MYSQL_PASSWORD"}}}
        {{ else }}
        - {"name": "SPARK_DB_DBNAME", "value": "spark"}
        - {"name": "SPARK_DB_USER", "value": "spark"}
        - {"name": "SPARK_DB_PASSWORD", "value": "spark"}
        {{ end }}
        volumeMounts:
        - name: migrations
          mountPath: /migrations
      - name: spark
        image: {{ .Values.image | default "orihoch/spark:modernize-dockerize" | quote }}
        ports:
        - containerPort: 3000
        command:
        - bash
        - "-c"
        - |
          while true; do
            if [ -e /migrations/ran ]; then
              rm -f /migrations/ran
              /home/spark/entrypoint.sh
              exit 0
            elif [ -e /migrations/failed ]; then
              echo "migrations failed"
              rm -f /migrations/failed
              exit 1
            fi
            echo "waiting for migrations..."
            sleep 5
          done
        resources: {{ .Values.resources }}
        envFrom: [{"configMapRef": {"name": "spark"}}]
        env:
        {{ if .Values.appSecretName }}
        - {"name": "SPARK_DB_DBNAME", "valueFrom": {"secretKeyRef": {"name": {{ .Values.appSecretName | quote }}, "key": "MYSQL_DATABASE"}}}
        - {"name": "SPARK_DB_USER", "valueFrom": {"secretKeyRef": {"name": {{ .Values.appSecretName | quote }}, "key": "MYSQL_USER"}}}
        - {"name": "SPARK_DB_PASSWORD", "valueFrom": {"secretKeyRef": {"name": {{ .Values.appSecretName | quote }}, "key": "MYSQL_PASSWORD"}}}
        {{ else }}
        - {"name": "SPARK_DB_DBNAME", "value": "spark"}
        - {"name": "SPARK_DB_USER", "value": "spark"}
        - {"name": "SPARK_DB_PASSWORD", "value": "spark"}
        {{ end }}
        {{ if .Values.secureMailserverSecretName }}
        - {"name": "SPARK_MAILSERVER_USER", "valueFrom": {"secretKeyRef": {"name": {{ .Values.secureMailserverSecretName | quote }}, "key": "SPARK_MAILSERVER_USER"}}}
        - {"name": "SPARK_MAILSERVER_PASSWORD", "valueFrom": {"secretKeyRef": {"name": {{ .Values.secureMailserverSecretName | quote }}, "key": "SPARK_MAILSERVER_PASSWORD"}}}
        {{ end }}
        {{ if .Values.facebookSecretName }}
        - {"name": "SPARK_FACEBOOK_SECRET", "valueFrom": {"secretKeyRef": {"name": {{ .Values.facebookSecretName | quote }}, "key": "SPARK_FACEBOOK_SECRET"}}}
        {{ end }}
        {{ if .Values.recaptchaSecretName }}
        - {"name": "SPARK_RECAPTCHA_SITEKEY", "valueFrom": {"secretKeyRef": {"name": {{ .Values.recaptchaSecretName | quote }}, "key": "SPARK_RECAPTCHA_SITEKEY"}}}
        - {"name": "SPARK_RECAPTCHA_SECRETKEY", "valueFrom": {"secretKeyRef": {"name": {{ .Values.recaptchaSecretName | quote }}, "key": "SPARK_RECAPTCHA_SECRETKEY"}}}
        {{ end }}
        {{ if .Values.drupalSecretName }}
        - {"name": "DRUPAL_PROFILE_API_PASSWORD", "valueFrom": {"secretKeyRef": {"name": {{ .Values.drupalSecretName | quote }}, "key": "DRUPAL_PROFILE_API_PASSWORD"}}}
        {{ end }}
        {{ if .Values.enableSecrets }}
        - name: SPARK_SECRET_TOKEN
          valueFrom:
            secretKeyRef:
              name: spark-secret-token
              key: SPARK_SECRET_TOKEN
        - name: SLACK_DEPLOY_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: slack-deploy-webhook
              key: SLACK_DEPLOY_WEBHOOK
        - {"name":"AWS_ACCESS_KEY_ID", "valueFrom": {"secretKeyRef": {"name": "spark-camp-files", "key": "AWS_ACCESS_KEY"}}}
        - {"name": "AWS_SECRET_ACCESS_KEY", "valueFrom": {"secretKeyRef": {"name": "spark-camp-files", "key": "AWS_SECRET_KEY"}}}
        {{ end }}
        readinessProbe:
          exec:
            command:
            - bash
            - "-c"
            - curl -L localhost:3000 | grep midburn
          initialDelaySeconds: 5
          periodSeconds: 5
        {{ if .Values.enableSlackNotification }}
        lifecycle:
          postStart:
            exec:
              command: 
              - 'bash'
              - '-c'
              - |
                curl -X POST --data-urlencode \
                "payload={\"channel\": \"#sparksystem-log\", \"username\": \"webhookbot\", \"text\": \"New k8s pod up and running! Hostname: $(hostname) Version: $(node -p "require('/home/spark/package.json').version") Env: {{ .Values.global.environmentName }} Commit: {{ .Values.image }}\", \"icon_emoji\": \":ghost:\"}" \
                $SLACK_DEPLOY_WEBHOOK
        {{ end }}
        volumeMounts:
        - name: migrations
          mountPath: /migrations
      volumes:
      - name: migrations
        emptyDir: {}
{{ end }}{{ end }}
