global:
  k8sOpsSecretName: ops
  k8sOpsImage: gcr.io/uumpa123/midburn-k8s
  environmentName: production
  opsRepoSlug: Midburn/midburn-k8s
  opsRepoBranch: master
  googleProjectId: midbarrn
  projectName: midburn
  enableRootChart: true
  backupsBucketName: midburn-k8s-backups
  # this is the same for all environments
  # gcloud compute instances describe midburn-k8s-persistent-storage-vm --zone=us-central1-a --format='value(networkInterfaces[0].networkIP)'
  persistentStorageIP: 10.128.0.7

traefik:
  enabled: true
  acmeDomains: |
    [[acme.domains]]
      main = "spark.midburn.org"
    [[acme.domains]]
      main = "production.midburn.org"
    [[acme.domains]]
      main = "volunteers.spark.midburn.org"
    [[acme.domains]]
      main = "dreams.midburn.org"
    [[acme.domains]]
      main = "talk.midburn.org"
#   [[acme.domains]]
#     main = "profiles.staging.midburn.org"
  acmeEmail: ori@uumpa.com
  dnsProvider: route53
  AWS_ACCESS_KEY_ID: AKIAIJUE2QVTBJAN7INQ
  AWS_REGION: "eu-west-1"
  sparkHostsRule: "Host: spark.midburn.org;"
  volunteersHostsRule: "Host: volunteers.spark.midburn.org;"
  # gcloud compute addresses create midburn-production-traefik --region=us-central1
  # gcloud compute addresses describe midburn-production-traefik --region=us-central1 | grep ^address:
  loadBalancerIP: "35.224.208.240"
  enableVolunteers: true
#  nodeHostName: gke-midbarrn-default-pool-ed511f2f-p08j
  backupJob: true
  enableLoadBalancer: true
# profilesHostsRule: "Host: profile.midburn.org;"
  dreamsHostsRule: "Host: dreams.midburn.org;"
#  SSLcheckMainDomain: production.midburn.org
#  SSLcheckSparkDomain: spark.midburn.org
#  SSLcheckProfilesDomain: profile.midburn.org
#  SSLcheckVolunteersDomain: volunteers.spark.midburn.org
  campsIndexPath: "/camps-2018/"
  enableLoomio: true
  loomioHostRule: "Host: talk.midburn.org;"

spark:
  nodeEnv: production
  enableSlackNotification: true
  serverUrl: https://spark.midburn.org/

  sparkAutoscaler:
    enabled: true
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 80

  # DB
  rootSecretName: sparkdb-root
  appSecretName: sparkdb-app
  enableDbInit: false
  dbBackupJob: true
  dbBackupSchedule: "@hourly"
  # persistent storage was setup using environments/staging/persistent_storage_migration.sh
  persistentStorageName: sparkdb

  # Mail - using Ori's Mailjet account
  disableMailtrap: "true"
  secureMailserverSecretName: spark-mail
  mailserverFrom: support@spark.staging.midburn.org
  mailserverHost: in-v3.mailjet.com
  mailserverPort: 2525

  # Drupal
  drupalSecretName: spark-drupal
  drupalProfileApiURL: https://profile.midburn.org
  drupalProfileApiUser: spark@midburn.org
  DRUPAL_TICKET_SYNC_EVERY_X_MINUTES: "2"
#  drupalSkipLogin: "1"

  # Volunteers
  volunteersBaseUrl: https://volunteers.spark.midburn.org

  # Supplier contract files
  suppliersBucket: midburn-spark-supplier-files-prod
  # Gate force entry
  gateSecretName: gate

nginx:
  htpasswdSecretName: nginx-htpasswd

volunteers:
  ENVIRONMENT: production
  SPARK_HOST: https://spark.midburn.org
  # dbImportJob:
  #   IMPORT_URL: gs://midburn-k8s-backups/volunteersdb-old-staging-dump-2017-12-27-18-01.tar.gz
  dbBackupJob: true
  # persistent storage was setup using environments/staging/volunteersdb_persistent_storage_migration.sh
  persistentStorageName: volunteersdb

profiles:
  dbImage: gcr.io/midbarrn/midburn-profiles-drupal-db-latest
  image: gcr.io/midbarrn/midburn-profiles-drupal-latest
  enabled: false
  # dbImportUrl: gs://midburn-k8s-backups/profiles-db-production-dump-2018-01-16-11-30.sql
  # NO trailing slash!
  drupalBaseUrl: https://profiles.staging.midburn.org

bi:
  enabled: true
  persistentStorageName: metabase

dreams:
  enabled: true
  enableSecrets: true
  importDB: false
  APP_URL: https://dreams.midburn.org/
  # persistent storage was setup using environments/staging/dreamsdb_persistent_storage_migration.sh
  persistentStorageName: dreamsdb
  dbBackupJob: true


chatops:
  enabled: true

camps-index:
  enabled: true
  sparkAppSecretName: sparkdb-app

tickets-sync:
  enabled: true
  #  kubectl create secret generic \
  #  --from-literal=SPARKDB_USER= --from-literal=SPARKDB_PASS= --from-literal=SPARKDB_HOST= --from-literal=SPARKDB_NAME= \
  #  --from-literal=PROFILEDB_USER= --from-literal=PROFILEDB_PASS= --from-literal=PROFILEDB_HOST= --from-literal=PROFILEDB_NAME=
  secretName: tickets-sync
  resources: >
    {"requests": {"cpu": "150m", "memory": "200Mi"}, "limits": {"memory": "500Mi"}}
