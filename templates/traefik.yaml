{{ if .Values.traefik.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: traefik
spec:
  ports:
  - {name: '80', port: 80}
  - {name: '443', port: 443}
  selector:
    app: traefik
  {{ if .Values.traefik.enableLoadBalancer }}
  type: LoadBalancer
  {{ if .Values.traefik.loadBalancerIP }}
  loadBalancerIP: {{ .Values.traefik.loadBalancerIP | quote }}
  {{ end }}
  {{ end }}
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: traefik
spec:
  # don't increase the replicas unless you switch to consul storage of acme certificates
  replicas: 1
  template:
    metadata:
      labels:
        app: traefik
      annotations:
        # update the pod on traefik configuration changes
        checksum/config: {{ include (print $.Template.BasePath "/traefik-etc.yaml") . | sha256sum }}
    spec:
      {{ if .Values.traefik.nodeHostName }}
      nodeSelector:
        kubernetes.io/hostname: {{ .Values.traefik.nodeHostName | quote }}
      {{ end }}{{ if .Values.traefik.nodePool }}
      nodeSelector:
        cloud.google.com/gke-nodepool: {{ .Values.traefik.nodePool | quote }}
      {{ end }}
      initContainers:
      # initops container - copies the acme data from last backup before starting up the pod
      - name: initops
        image: gcr.io/uumpa-public/sk8s-google-storage-sync:v0.0.2
        resources: {"requests": {"cpu": "1m", "memory": "2Mi"}}
        command:
        - bash
        - "-c"
        - |
          source ~/.bashrc;
          gcloud config set project {{ .Values.global.googleProjectId | quote }}
          ! gsutil -m rsync -x '^done|synced$' -r "gs://{{ .Values.global.backupsBucketName }}/{{ .Values.global.environmentName }}/traefik-acme/latest/" /traefik-acme/ \
            && echo "failed to get traefik acme details from backup, continuing anyway, traefik will create new certificates (hopefully..)"
          chmod -R 600 /traefik-acme
        volumeMounts:
        - name: k8s-ops
          mountPath: /k8s-ops
          readOnly: true
        - name: traefik-acme
          mountPath: /traefik-acme
      containers:
      - name: ops
        image: gcr.io/uumpa-public/sk8s-google-storage-sync:v0.0.2
        resources: {"requests": {"cpu": "1m", "memory": "2Mi"}}
        command:
        - bash
        - "-c"
        - |
          source ~/.bashrc;
          gcloud config set project {{ .Values.global.googleProjectId | quote }}
          echo "sleeping for 10 minutes before making the first backup to allow traefik time to issue certificates"
          sleep 600
          echo "making daily backups"
          LATEST_BACKUP="gs://{{ .Values.global.backupsBucketName }}/{{ .Values.global.environmentName }}/traefik-acme/latest/"
          echo "LATEST_BACKUP=${LATEST_BACKUP}"
          while true; do
            HISTORY_BACKUP="gs://{{ .Values.global.backupsBucketName }}/{{ .Values.global.environmentName }}/traefik-acme/`date +%Y-%m-%d-%H-%M`/"
            echo "HISTORY_BACKUP=${HISTORY_BACKUP}"
            ! gsutil -m rsync -x '^done|synced$' -r /traefik-acme/ "${LATEST_BACKUP}" \
              && echo "failed to sync latest backup" && exit 1
            ! gsutil -m rsync -x '^done|synced$' -r /traefik-acme/ "${HISTORY_BACKUP}" \
              && echo "failed to sync ${HISTORY_BACKUP}" && exit 1
            echo "sleeping for 1 day"
            sleep 86400
          done
#        readinessProbe:
#          exec:
#            command:
#            - bash
#            - "-c"
#            - |
#              RES=0
#              check_domain() {
#                curl --insecure -v https://${1}/ 2>&1 | grep "SSL certificate verify " | tee /dev/stderr | grep "SSL certificate verify ok."
#              }
#              {{ if .Values.traefik.SSLcheckMainDomain }}! check_domain {{ .Values.traefik.SSLcheckMainDomain }} && RES=1{{ end }}
#              {{ if .Values.traefik.SSLcheckSparkDomain }}! check_domain {{ .Values.traefik.SSLcheckSparkDomain }} && RES=1{{ end }}
#              {{ if .Values.traefik.SSLcheckProfilesDomain }}! check_domain {{ .Values.traefik.SSLcheckProfilesDomain }} && RES=1{{ end }}
#              {{ if .Values.traefik.SSLcheckVolunteersDomain }}! check_domain {{ .Values.traefik.SSLcheckVolunteersDomain }} && RES=1{{ end }}
#              exit $RES
#          initialDelaySeconds: 5
#          periodSeconds: 5
        volumeMounts:
        - name: k8s-ops
          mountPath: /k8s-ops
          readOnly: true
        - name: traefik-acme
          mountPath: /traefik-acme
      - name: traefik
        image: traefik
        ports:
        - {containerPort: 80}
        - {containerPort: 443}
        resources:
          requests: {cpu: 20m}
        volumeMounts:
        - name: etc-traefik
          mountPath: /etc-traefik
        - name: traefik-acme
          mountPath: /traefik-acme
        args:
        - "--configFile=/etc-traefik/traefik.toml"
        {{ if eq .Values.traefik.dnsProvider "route53" }}
        env:
        - name: AWS_ACCESS_KEY_ID
          value: {{ .Values.traefik.AWS_ACCESS_KEY_ID | quote }}
        - name: AWS_REGION
          value: {{ .Values.traefik.AWS_REGION | quote }}
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: route53
              key: AWS_SECRET_ACCESS_KEY
        {{ end }}
      volumes:
      - name: etc-traefik
        configMap:
          name: etc-traefik
      - name: traefik-acme
        emptyDir: {}
      - name: k8s-ops
        secret:
          secretName: ops
{{ end }}
